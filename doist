#!/usr/bin/env python3

import todoist
import argparse
from os import environ as env

user = env['USER']
token = env['TODOIST_API_KEY']

parser = argparse.ArgumentParser(description='Add tasks to Todoist')
parser.add_argument('-p', dest='pid', help='project id')
parser.add_argument(
    '-P',
    dest='pri',
    type=int,
    choices=(1, 2, 3, 4),
    default=None,
    help='task priority')
parser.add_argument(
    '-l', dest='labels', action='append', default=None, help='task label')
parser.add_argument('-d', dest='date', default=None, help='date string')
parser.add_argument('command', choices=('list', 'add', 'quick'))
parser.add_argument('content', nargs=argparse.REMAINDER)
args = parser.parse_args()
args.content = ' '.join(args.content)

api = todoist.TodoistAPI(token)
api.sync()


def list_projects():

    for project in api.state['projects']:
        if project['indent'] == 1:
            print(f'''{project['name']}''')
        else:
            print(f'''|{'-' * (project['indent'] - 1)} {project['name']}''')


def create_task(
        task,
        date=None,
        pid=[p['id'] for p in api.state['projects']
             if p['name'] == 'Inbox'][0],
        priority=None,
        labels=None):

    # Test if a project id is given, otherwise convert it
    if args.pid:
        try:
            pid = int(args.pid)
        except ValueError as e:
            for project in api.state['projects']:
                if project['name'] == args.pid:
                    pid = project['id']
                    break

    # Convert the label names to ids
    if labels:
        label_ids = [
            lobj['id'] for label in labels
            for lobj in api.labels.state['labels'] if label == lobj['name']
        ]
        labels = label_ids

    try:
        api.items.add(
            content=task,
            date_string=date,
            project_id=pid,
            priority=priority,
            labels=labels,
            auto_reminder=1)
    except SyncError as e:
        print(e)

    api.commit()


def quick_add(task):

    api.quick.add(task)
    api.commit()


if args.command == 'list':
    list_projects()
elif args.command == 'quick':
    quick_add(args.content)
elif args.command == 'add':
    create_task(args.content, args.date, args.pid, args.pri, args.labels)
else:
    parser.print_help()
